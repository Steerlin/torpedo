<?php


namespace Torpedo\CqrsBundle\Tests\CommandBus;


use Torpedo\CQRS\Command\CommandBus;
use Torpedo\CQRS\Command\CommandDispatcher;
use Torpedo\CqrsBundle\Command\LazyContainerCommandDispatcher;
use Torpedo\CqrsBundle\CommandBus\DoctrineDefaultCommandBus;
use Torpedo\CqrsBundle\CommandBus\DoctrineSerialisedCommandRepository;
use Torpedo\CqrsBundle\CommandBus\SerialisedCommandRepository;
use Torpedo\EventSourcingBundle\RocketTestUseCase\LaunchRocket;
use Torpedo\Testing\TransactionalTest;

final class DoctrineCommandBusTest extends TransactionalTest
{
    /**
     * @var CommandBus
     */
    private $commandBus;

    /**
     * @var SerialisedCommandRepository
     */
    private $serialisedCommandRepository;

    /**
     * @var CommandDispatcher
     */
    private $commandDispatcher;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->serialisedCommandRepository = new DoctrineSerialisedCommandRepository($this->getEntityManager());
        $this->commandDispatcher = new LazyContainerCommandDispatcher($this->getContainer());
        $this->commandBus = new DoctrineDefaultCommandBus($this->serialisedCommandRepository, $this->commandDispatcher);
    }


    /**
     * @test
     */
    public function should_queue_and_dispatch_commands()
    {
        $commandA = new LaunchRocket('Mars', 'Pluto');
        $commandB = new LaunchRocket('Sun', 'Jupiter');
        $this->commandBus->queue($commandA);
        $this->commandBus->queue($commandB);

        $this->getEntityManager()->flush();
        $this->getEntityManager()->clear();

        $this->commandBus->dispatchNext();

        $launchLog = $this->getContainer()
                          ->get('torpedo_event_sourcing.rocket_test_use_case.launch_log_read_model_repository');
        $log = $launchLog->all();
        $expected = <<<JSON
[
    {
        "to": "Pluto",
        "from": "Mars"
    }
]
JSON;

        $this->assertEquals($expected, json_encode($log, JSON_PRETTY_PRINT));

        $this->commandBus->dispatchNext();
        $log = $launchLog->all();
        $expected = <<<JSON
[
    {
        "to": "Pluto",
        "from": "Mars"
    },
    {
        "to": "Jupiter",
        "from": "Sun"
    }
]
JSON;

        $this->assertEquals($expected, json_encode($log, JSON_PRETTY_PRINT));

    }


}
